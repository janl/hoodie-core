#!/usr/bin/env node
var fs = require("fs");
var cli = require("cli");
var util = require("util");
var daemon = require("daemonize2");
var exec = require("child_process").exec;

require("shelljs/global"); // GIMMEH!

var HoodieApp = require("./lib/app.js");
var Config = require("./lib/config.js");

var commands = {};
commands["usage"] = function usage(args)
{
    if(args && args[0] && args[0] !== "usage") {
        console.log("Unknown command '%s'\n", cmd);
    }
    console.log("Usage: hoodie cmd");
    console.log("cmd is one of:");
    console.log("  setup          This needs to be run once, before everything else");
    console.log("  new appname    Creates new Hoodie app in ./appname");
    console.log("  start          Starts the Hoodie app in ./");
    console.log("  start appname  Starts the Hoodie app appname");
    console.log("  open appname   Opens an app in your browser");
    console.log("  open           Opens the app in ./ in your browser");
    console.log("  apps           Shows a list of all installed apps");
    console.log("  service-start  Starts the Hoodie service");
    console.log("  usage          Prints this screen");
};

commands["setup"] = function setup(args)
{
    // got root?
    if(process.getuid() !== 0) {
        console.log("Please use: 'sudo hoodie setup'");
        console.log("We hope to remove the sudo requirement in the future. Sorry about that!");
        return;
    }
    try {
        // create /etc/resolver/#{name}.hoodie.dev
        console.log("DNS’in.");
        var contents = [
            "nameserver 127.0.0.1",
            "port 3333"
        ].join("\n");
        fs.writeFileSync("/tmp/hoodie-resolver.tmp", contents);
        // mkdir -p /etc/resolver
        mkdir("-p", "/etc/resolver");
        exec("cp /tmp/hoodie-resolver.tmp /etc/resolver/hoodie.dev");

        console.log("Firewallin’.");
        var cmd = "launchctl load -Fw " + __dirname + "/etc/ie.hood.firewall.plist"
        exec(cmd, function(error, stdout, stderr) {
            if(error) { throw error };
            console.log("Setup done, thanks for your patience!");
            console.log("What do you want to do next?");
            console.log("Type 'hoodie' for options.");
        });

        // create var log hoodie, make group writeable
        var varloghoodie = "/var/log/hoodie";
        mkdir("-p", varloghoodie);
        chgrp("admin", varloghoodie);
        chmod("g+w", varloghoodie);
    } catch(e) {
        console.log("hoodie setup failed: %s", e);
        return;
    }
    // setup went fine
    var config = new Config();
    config.set("setup", true);
};


commands["service-start"] = function service_start()
{
    console.log("Starting Hoodie");
    var service = get_hoodie_service();
    service.start();
};

commands["service-stop"] = function service_stop()
{
    console.log("Stopping Hoodie");
    var service = get_hoodie_service();
    service.stop();
};

// Create a new app

commands["new"] = function hoodie_new(args)
{
    if(!args[0]) {
        console.log("Missing appname: hoodie new appname");
        return;
    }
    var name = args[0];

    console.log("Creating new Hoodie app '" + name + "'");

    // create app
    var cmd = "git clone https://github.com/hoodiehq/hoodie-app-skeleton.git " + name;
    exec(cmd, function(error, stdout, stderr) {
        if(error) {
            throw(error);
        }

        // Customise app
        var customisation = {
            hoodie_appname: name,
            hoodie_api_url: "http://api." + name + ".hoodie.dev"
        };

        var template_files = ["/www/index.html", "/package.json"];
        template_files.forEach(function(file) {
            file = name + file;
            console.log("replacing values in '%s'", file);
            for(var placeholder in customisation) {
                var replacement = customisation[placeholder];
                var matcher = new RegExp("{{" + placeholder + "}}", "g");
                sed("-i", matcher, replacement, file);
            }
        });

        try {
            // add app config to ~/.hoodie.json
            var config = new Config();
            config.add_app(name, {
                path: process.cwd() + "/" + name,
                port: config.get_max_port() + 100 // running out of ports
            });
        } catch(e) {
            // rm ./appname
            throw(e);
        }

        // update routing proxy by touching ~/.hoodie.json
        var newDate = new Date();
        fs.utimesSync(process.env["HOME"] + "/.hoodie.json", newDate, newDate);

        console.log("All done.");
        console.log("Use hoodie start " + name + " to start the new app");
    });
};

commands["delete"] = function _delete(args)
{
    var app_name = app_name_from_args(args); // TODO: handle nonexist
    var app = new HoodieApp(app_name);
    // bail if app runs
    if(app.is_running()) {
        console.log("App '%s' is running, can’t delete.", app_name);
        return;
    }
    // rm -rf path
    rm("-rf", app.get_path());

    // config unset
    var config = new Config();
    config.delete_app(app_name);
}

commands["status"] = function status(args)
{
    var app_name = app_name_from_args(args);
    var app = new HoodieApp(app_name);
    console.log("%j", app.status());
}

// start an app
// in ./ of app: hoodie start
// anywhere: hoodie start app
//   looks up 'app' in ~/.hoodie.json
commands["start"] = function start(args)
{
    commands["service-start"]();
    var app_name = app_name_from_args(args);
    var app = new HoodieApp(app_name);
    app.start();
};

// stop an app
// in ./ of app: hoodie stop
// anywhere: hoodie stop app
//   looks up 'app' in ~/.hoodie.json
commands["stop"] = function stop(args)
{
    var app_name = app_name_from_args(args);
    var app = new HoodieApp(app_name);
    app.stop();
};

// list all apps
commands["apps"] = function apps()
{
    var config = new Config();
    var apps = config.get_apps();
    console.log("");
    for(var name in apps) {
        var app = apps[name];
        console.log("%s:", name);
        console.log("  http://%s.hoodie.dev", name);
        console.log("  %s", app.path);
        console.log("");
    }
}

// open an app
commands["open"] = function open(args)
{
  var app_name = app_name_from_args(args);
  exec(util.format("open http://%s.hoodie.dev", app_name));
};

var app_name_from_args = function app_name_from_args(args)
{
    var app_name;
    if(args.length == 0) {
        // read "app" from CWD/package.json:name when type: "hoodie-app"
        app_name = JSON.parse(fs.readFileSync("package.json")).name;
    } else {
        // args[0] is name
        app_name = args[0];
    }
    return app_name;
};

var get_hoodie_service = function get_hoodie_service()
{
    return daemon.setup({
        main: "./bin/hoodie-service.js",
        name: "service-start.js",
        pidfile: "/tmp/hoodie-service.pid"
    });
};

// main

cli.main(function(args, options) {
    // has run setup?
    var config = new Config();
    var cmd = args[0] || "usage";
    if(!commands[cmd]) {
        commands.usage(["usage"]);
        return;
    }

    // we need to run setup at least once
    if(!config.get("setup") && cmd != "setup") {
        console.log("To use hoodie, you need to run:");
        console.log("  sudo hoodie setup");
        console.log("at least once. Thanks! :)");
        return;
    }

    commands[cmd](args.slice(1));
});
