#!/usr/bin/env node
var fs = require("fs");
var cli = require("cli");
var daemon = require("daemonize2");
var exec = require("child_process").exec;
var HoodieApp = require("./lib/app.js");
var Config = require("./lib/config.js");

var commands = {};
commands.usage = function usage(args)
{
    if(args[0] && args[0] !== "usage") {
        console.log("Unknown command '%s'\n", cmd);
    }
    console.log("Usage: hoodie cmd");
    console.log("cmd is one of:");
    console.log("  new appname    Creates new Hoodie app in ./appname");
    console.log("  start          Starts the Hoodie app in ./");
    console.log("  start appname  Starts the Hoodie app appname");
    console.log("  service-start  Starts the Hoodie service");
    console.log("  usage          Prints this screen");
};

commands["service-start"] = function service_start()
{
    console.log("Starting Hoodie");
    var service = get_hoodie_service();
    service.start();
};

commands["service-stop"] = function service_stop()
{
    console.log("Stopping Hoodie");
    var service = get_hoodie_service();
    service.stop();
};

// Create a new app

commands["new"] = function hoodie_new(args)
{
    if(!args[0]) {
        console.log("Missing appname: hoodie new appname");
        return;
    }
    var name = args[0];

    // got root?
    if(process.getuid() !== 0) {
        console.log("Please use: 'sudo hoodie new " + name + "'");
        console.log("We hope to remove the sudo requirement in the future. Sorry about that!");
        return;
    }

    console.log("Creating new Hoodie app '" + name + "'");

    // create app
    var sudo_user = process.env["SUDO_USER"];
    var cmd = "sudo -u " + sudo_user +" git clone https://github.com/hoodiehq/hoodie-app-skeleton.git " + name;
    exec(cmd, function(error, stdout, stderr) {
        if(error) {
            throw(error);
        }
        // add app config to ~/.hoodie.json
        var config = new Config();
        config.add_app(name, {
            path: process.cwd() + "/" + name,
            port: config.get_max_port() + 100 // running out of ports
        });
        // create /etc/resolver/#{name}.hoodie.local
        var contents = [
            "nameserver 127.0.0.1",
            "port 3333"
        ].join("\n");
        fs.writeFileSync("/tmp/hoodie-resolver.tmp", contents);
        exec("cp /tmp/hoodie-resolver.tmp /etc/resolver/" + name + ".hoodie.local");

        // update routing proxy by touching ~/.hoodie.json
        var newDate = new Date();
        fs.utimesSync(process.env["HOME"] + "/.hoodie.json", newDate, newDate);

        console.log("Firewallinâ€™");
        var cmd = "sudo launchctl load -Fw " + __dirname + "/etc/ie.hood.firewall.plist"
        exec(cmd, function(error, stdout, stderr) {
            if(error) { throw error };
            console.log("All done.");
            console.log("Use hoodie start " + name + " to start the new app");
        });
    });
};

// start an app
// in ./ of app: hoodie start
// anywhere: hoodie start app
//   looks up 'app' in ~/.hoodie.json
commands["start"] = function start(args)
{
    commands["service-start"]();
    var app_name = app_name_from_args(args);
    var app = new HoodieApp(app_name);
    app.start();
};

// stop an app
// in ./ of app: hoodie stop
// anywhere: hoodie stop app
//   looks up 'app' in ~/.hoodie.json
commands["stop"] = function stop(args)
{
    var app_name = app_name_from_args(args);
    var app = new HoodieApp(app_name);
    app.stop();
};

var app_name_from_args = function app_name_from_args(args)
{
    var app_name;
    if(args.length == 0) {
        // read "app" from CWD/package.json:name when type: "hoodie-app"
        app_name = JSON.parse(fs.readFileSync("package.json")).name;
    } else {
        // args[0] is name
        app_name = args[0];
    }
    return app_name;
};

var get_hoodie_service = function get_hoodie_service()
{
    return daemon.setup({
        main: "./bin/hoodie-service.js",
        name: "service-start.js",
        pidfile: "/tmp/hoodie-service.pid"
    });
};


// main

cli.main(function(args, options) {
    var cmd = args[0] || "usage";
    if(!commands[cmd]) {
        commands.usage(["usage"]);
        return;
    }
    commands[cmd](args.slice(1));
});
